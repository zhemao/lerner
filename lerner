#!/usr/bin/env python

import redis
import json
import sys
import os
import shutil
import json
import resource
import signal
import socket
import time
from gi.repository import Notify
from redis.exceptions import ResponseError, ConnectionError

CONFIG_DIR = os.path.expanduser("~/.lerner")
USER_CONFIG = os.path.join(CONFIG_DIR, "config.json")
CLIENT_PID = os.path.join(CONFIG_DIR, "client.pid")
CLIENT_LOG = os.path.join(CONFIG_DIR, "client.log")

def create_config():
    host = raw_input("hostname: ")
    rawport = raw_input("port [default 6379]: ")
    channels = raw_input("channels (comma separated list): ").split(',')
    auth = raw_input("auth key (leave blank if no auth): ")
    
    channels = [chan.strip() for chan in channels]
    port = 6379 if rawport == '' else int(rawport)
    config = {'host': host, 'port': port, 'channels': channels, 'auth':auth}

    if not os.path.isdir(CONFIG_DIR):
        os.mkdir(CONFIG_DIR, 0700)

    f = open(USER_CONFIG, 'w')
    json.dump(config, f, indent=4)
    f.close()
    os.chmod(USER_CONFIG, 0600)

    print("Configuration file created in " + USER_CONFIG)

def listen_for_notifications(config):
    r = redis.Redis(host=config['host'], port=config['port'])
    
    if config['auth'] != '':
        r.execute_command('auth', config['auth'])

    ps = r.pubsub()
    ps.subscribe(config['channels'])

    for msg in ps.listen():
        if msg['type'] == 'message':
            if ':' in msg['data']:
                title, text = tuple(msg['data'].split(':'))
                text = text.strip()
            else:
                title = 'Lerner'
                text = msg['data']
            n = Notify.Notification.new(title, text, None)
            n.show()

def cleanup(sig, stack=None):
    print("Cleaning up")
    os.remove(CLIENT_PID)
    exit()

def daemonize(target, args=()):
    if hasattr(os, "devnull"):
        DEVNULL = os.devnull
    else:
        DEVNULL = "/dev/null"

    pid = os.fork()

    if pid == 0:
        
        pid = os.fork()
        
        if pid == 0:
            os.chdir(CONFIG_DIR)
            os.umask(0)
        else:
            f = open(CLIENT_PID, "w")
            f.write(str(pid))
            f.close()
            exit()
    else:
        exit()

    maxfd = resource.getrlimit(resource.RLIMIT_NOFILE)[1]
    if maxfd == resource.RLIM_INFINITY:
        maxfd = 1024

    for fd in range(0, maxfd):
        try:
            os.close(fd)
        except OSError:
            pass

    os.open(DEVNULL, os.O_RDWR)
    os.open(CLIENT_LOG, os.O_WRONLY|os.O_CREAT|os.O_APPEND)

    os.chmod(CLIENT_LOG, 0644)

    os.dup2(1, 2)
    
    signal.signal(signal.SIGINT, cleanup)
    signal.signal(signal.SIGTERM, cleanup)
    
    try:
        while True:
            try: 
                target(*args)
            except socket.error:
                pass
            except ConnectionError:
                print("Could not connect. Retrying...")
                continue
            print "Connection closed. Restarting"
    finally:
        cleanup(signal.SIGINT)

def process_exists(pid):
    return os.path.exists("/proc/" + str(pid))

def stop_daemon():
    print('Stopping daemon')
    if not os.path.isfile(CLIENT_PID):
        print("Daemon isn't running")
        exit()
    f = open(CLIENT_PID)
    pid = int(f.read())
    f.close()
        
    signals = [signal.SIGINT, signal.SIGTERM, signal.SIGKILL]
    
    for sig in signals:
        if process_exists(pid):
            os.kill(pid, sig)
            time.sleep(1)
        else:
            print("Process stopped")
            break

def start_daemon(config):
    Notify.init("notistream")
    print("Listening for notifications")
    if os.path.isfile(CLIENT_PID):
        ans = raw_input("A client is already running. Restart it? [y/n] ")
        if ans == 'y':
            stop_daemon()
        else:
            exit()

    daemonize(listen_for_notifications, (config,))

def main():

    if not os.path.isfile(USER_CONFIG):
        print "You do not yet have a configuration file."
        print "You will need one to continue."
        create = (raw_input("Do you want to create one? [y/n] ") == 'y')
        if create:
            create_config()
        else:
            print "Exiting..."
            exit(1)
    
    f = open(USER_CONFIG)

    config = json.load(f)
    f.close()
    
    if len(sys.argv) < 2:
        print(('Commands\n\n'
               '\tstart\n'
               '\tstop\n'
               '\treconfigure'))
        exit(1)

    if sys.argv[1] == 'debug':
        listen_for_notifications(config)
    elif sys.argv[1] == 'start':
        start_daemon(config)
    elif sys.argv[1] == 'stop':
       stop_daemon()
    elif sys.argv[1] == 'reconfigure':
        create_config()
    else:
        print('Invalid command')
        

    

if __name__ == '__main__':
    main()
